import { MultiSolver } from '@solosudoku/core';
import { GridHelper, stringSort } from '@solosudoku/helpers';
import { Grid } from '@solosudoku/models';

const gridWithTwoSolutions: Grid = [
  [0, 8, 0, 0, 1, 6, 0, 0, 2],
  [6, 3, 4, 2, 0, 9, 0, 1, 0],
  [0, 0, 0, 8, 0, 0, 9, 5, 0],
  [8, 0, 0, 3, 2, 4, 1, 7, 0],
  [4, 0, 2, 0, 9, 0, 5, 8, 3],
  [3, 9, 7, 5, 8, 1, 2, 0, 4],
  [0, 0, 0, 0, 6, 8, 4, 9, 5],
  [9, 6, 0, 0, 3, 0, 0, 0, 0],
  [1, 0, 0, 9, 7, 2, 0, 3, 8],
];

const SOLUTION_1: string = '589716342634259817271843956856324179412697583397581264723168495968435721145972638';
const SOLUTION_2: string = '589716342634259817721843956856324179412697583397581264273168495968435721145972638';

/* This specific solution was posted on GitHub as a puzzle with multiple solutions, generated by the PHP version */
describe('MultiSolver', () => {
  it('should have two solutions', () => {
    const result: Grid[] = MultiSolver.solve(gridWithTwoSolutions);
    expect(result.length).toBe(2);

    const stringResults: string[] = result.map((grid: Grid) => GridHelper.toString(grid)).sort(stringSort);
    const stringExpected: string[] = [SOLUTION_1, SOLUTION_2];

    expect(stringResults).toEqual(stringExpected);
  });
});
